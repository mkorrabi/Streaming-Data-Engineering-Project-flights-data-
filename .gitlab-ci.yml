workflow:
  rules:
    # si commit pipeline sur une merge request ouverte, ne rien faire. Car une MR pipeline sera déclenché aussi.
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
      when: never
    # commit sur une brange protégée ou MR pipeline
    - if: '$CI_COMMIT_REF_PROTECTED == "true" || $CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - when: never


variables:
  POETRY_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pypoetry"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  IMAGE_PYTHON: python:3.9.13-buster




# image: python:3.11
image: ${IMAGE_PYTHON}

cache:
  key:
    files:
      - poetry.lock #poetry.lock: Cette ligne indique que le fichier poetry.lock sera utilisé pour générer une clé de cache. Si ce fichier change, le cache sera invalidé et recréé
  paths:
    - .cache/pypoetry  #.cache/pypoetry: Ce chemin indique que le répertoire .cache/pypoetry sera mis en cache. Cela permet de stocker les dépendances gérées par poetry pour les réutiliser dans les exécutions futures
    - .cache/pip #.cache/pip: Ce chemin indique que le répertoire .cache/pip sera mis en cache. Cela permet de stocker les dépendances gérées par pip pour les réutiliser dans les exécutions futures.

stages:
  - test

before_script:
  - python --version
  - pip install poetry
  - pip --version
  - poetry --version
  - poetry install --with dev --no-interaction
  - poetry env info
  # to prevent warning when testing with git
  - git config --global init.defaultBranch main
  - git config --global user.email $GITLAB_USER_EMAIL
  - git config --global user.name $GITLAB_USER_NAME




###############
# STAGE: TEST #
###############
# Tests unitaires
# Coverage
# si pas de tag

tests:
  stage: test
  # extends: .poetry
  tags:
    - docker
  script:
    - poetry run pytest --junitxml report.xml --cov-branch --cov=. --cov-report term  --cov-report xml:coverage.xml tests

  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  rules:
    - if: '$CI_COMMIT_TAG == null'
    - if: $CI_COMMIT_BRANCH != 'kata'
      changes:
        - .gitlab/cicd.yml
        - tests/**/*
     

###############
# STAGE: TEST #
###############
# Formatting
# Linting
# pas sur la branche gl-pages
code_quality:
  stage: test
  # extends: .poetry
  rules:
    - if: $CI_COMMIT_BRANCH != 'kata'
  tags:
    - docker
  script:
    - poetry run ruff check --output-format=gitlab --output-file gl-code-quality-report.json -e
    # - poetry run ruff check --output-format concise --show-fixes
    - poetry run pre-commit run --all-files --show-diff-on-failure
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json


